# This GitHub Actions workflow automates the process of building, testing, and publishing a Python package to PyPI.
#
# Workflow Overview:
# 1. **Trigger:** The workflow runs when a new release is published on GitHub.
# 2. **Build Stage:**
#    - Checks out the repository.
#    - Sets up the Python environment.
#    - Installs dependencies from `requirements.txt` if available.
#    - Runs tests using `pytest` to ensure code stability.
#    - Verifies that the version in `setup.py` matches the release tag.
#    - Builds the Python distribution packages.
# 3. **Upload Artifacts:** Uploads the built distribution files as artifacts.
# 4. **Publish Stage:**
#    - Downloads the built artifacts.
#    - Conditionally publishes to TestPyPI for pre-releases (e.g., `-rc`, `-beta`).
#    - Publishes to the official PyPI repository for stable releases.
#    - Optionally signs the distribution with GPG if a key is provided.

name: Upload Python Package

on:
  release:
    types: [published]

permissions:
  contents: read
  packages: write  # Added for GitHub Packages support

jobs:
  release-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.8 - 3.11"  # Specify supported Python versions

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run tests
        run: |
          pip install pytest
          pytest

      - name: Check version consistency
        run: |
          VERSION=$(python setup.py --version)
          if [ "$VERSION" != "${GITHUB_REF#refs/tags/}" ]; then
            echo "Version mismatch: $VERSION != ${GITHUB_REF#refs/tags/}"
            exit 1
          fi

      - name: Build release distributions
        run: |
          python -m pip install build
          python -m build

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - release-build
    permissions:
      id-token: write

    environment:
      name: pypi

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish to TestPyPI (for pre-releases)
        if: contains(github.ref, '-rc') || contains(github.ref, '-beta')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: dist/

      - name: Publish to PyPI (for stable releases)
        if: "!contains(github.ref, '-rc') && !contains(github.ref, '-beta')"
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/

      # Optional GPG Signing
      - name: Sign distribution (Optional)
        if: env.GPG_PRIVATE_KEY != ''
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --import
          for file in dist/*; do
            gpg --detach-sign -a "$file"
          done
